// Generated by vproto - Do not modify
module proto

import emily33901.vproto

pub struct CMsgClientSiteInfo {
mut:
	unknown_fields               []vproto.UnknownField
pub mut:
	site_id                      u64
	has_site_id                  bool
	site_name                    string
	has_site_name                bool
	allow_cached_credentials     bool
	has_allow_cached_credentials bool
}

pub fn (o &CMsgClientSiteInfo) pack() []byte {
	mut res := []byte{}
	if o.has_site_id {
		res << vproto.pack_uint64_field(o.site_id, 1)
	}
	if o.has_site_name {
		res << vproto.pack_string_field(o.site_name, 2)
	}
	if o.has_allow_cached_credentials {
		res << vproto.pack_bool_field(o.allow_cached_credentials, 3)
	}
	return res
}

pub fn cmsgclientsiteinfo_unpack(buf []byte) ?CMsgClientSiteInfo {
	mut res := CMsgClientSiteInfo{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_site_id = true
				ii, v := vproto.unpack_uint64_field(cur_buf, tag_wiretype.wire_type)?
				res.site_id = v
				i = ii
			}
			2 {
				res.has_site_name = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.site_name = v
				i = ii
			}
			3 {
				res.has_allow_cached_credentials = true
				ii, v := vproto.unpack_bool_field(cur_buf, tag_wiretype.wire_type)?
				res.allow_cached_credentials = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cmsgclientsiteinfo() CMsgClientSiteInfo {
	return CMsgClientSiteInfo{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cmsgclientsiteinfo(o CMsgClientSiteInfo, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cmsgclientsiteinfo(buf []byte, tag_wiretype vproto.WireType) ?(int, CMsgClientSiteInfo) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cmsgclientsiteinfo_unpack(v)?
	return i, unpacked
}

pub struct CMsgClientSiteLicenseCheckout {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	appid          u32
	has_appid      bool
}

pub fn (o &CMsgClientSiteLicenseCheckout) pack() []byte {
	mut res := []byte{}
	if o.has_appid {
		res << vproto.pack_uint32_field(o.appid, 1)
	}
	return res
}

pub fn cmsgclientsitelicensecheckout_unpack(buf []byte) ?CMsgClientSiteLicenseCheckout {
	mut res := CMsgClientSiteLicenseCheckout{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_appid = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.appid = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cmsgclientsitelicensecheckout() CMsgClientSiteLicenseCheckout {
	return CMsgClientSiteLicenseCheckout{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cmsgclientsitelicensecheckout(o CMsgClientSiteLicenseCheckout, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cmsgclientsitelicensecheckout(buf []byte, tag_wiretype vproto.WireType) ?(int, CMsgClientSiteLicenseCheckout) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cmsgclientsitelicensecheckout_unpack(v)?
	return i, unpacked
}

pub struct CMsgClientSiteLicenseCheckoutResponse {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	eresult        int
	has_eresult    bool
}

pub fn (o &CMsgClientSiteLicenseCheckoutResponse) pack() []byte {
	mut res := []byte{}
	if o.has_eresult {
		res << vproto.pack_int32_field(o.eresult, 1)
	}
	return res
}

pub fn cmsgclientsitelicensecheckoutresponse_unpack(buf []byte) ?CMsgClientSiteLicenseCheckoutResponse {
	mut res := CMsgClientSiteLicenseCheckoutResponse{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_eresult = true
				ii, v := vproto.unpack_int32_field(cur_buf, tag_wiretype.wire_type)?
				res.eresult = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cmsgclientsitelicensecheckoutresponse() CMsgClientSiteLicenseCheckoutResponse {
	return CMsgClientSiteLicenseCheckoutResponse{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cmsgclientsitelicensecheckoutresponse(o CMsgClientSiteLicenseCheckoutResponse, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cmsgclientsitelicensecheckoutresponse(buf []byte, tag_wiretype vproto.WireType) ?(int, CMsgClientSiteLicenseCheckoutResponse) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cmsgclientsitelicensecheckoutresponse_unpack(v)?
	return i, unpacked
}

pub struct CMsgClientSiteLicenseGetAvailableSeats {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	appid          u32
	has_appid      bool
}

pub fn (o &CMsgClientSiteLicenseGetAvailableSeats) pack() []byte {
	mut res := []byte{}
	if o.has_appid {
		res << vproto.pack_uint32_field(o.appid, 1)
	}
	return res
}

pub fn cmsgclientsitelicensegetavailableseats_unpack(buf []byte) ?CMsgClientSiteLicenseGetAvailableSeats {
	mut res := CMsgClientSiteLicenseGetAvailableSeats{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_appid = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.appid = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cmsgclientsitelicensegetavailableseats() CMsgClientSiteLicenseGetAvailableSeats {
	return CMsgClientSiteLicenseGetAvailableSeats{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cmsgclientsitelicensegetavailableseats(o CMsgClientSiteLicenseGetAvailableSeats, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cmsgclientsitelicensegetavailableseats(buf []byte, tag_wiretype vproto.WireType) ?(int, CMsgClientSiteLicenseGetAvailableSeats) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cmsgclientsitelicensegetavailableseats_unpack(v)?
	return i, unpacked
}

pub struct CMsgClientSiteLicenseGetAvailableSeatsResponse {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	eresult        int
	has_eresult    bool
	seats          u32
	has_seats      bool
}

pub fn (o &CMsgClientSiteLicenseGetAvailableSeatsResponse) pack() []byte {
	mut res := []byte{}
	if o.has_eresult {
		res << vproto.pack_int32_field(o.eresult, 1)
	}
	if o.has_seats {
		res << vproto.pack_uint32_field(o.seats, 2)
	}
	return res
}

pub fn cmsgclientsitelicensegetavailableseatsresponse_unpack(buf []byte) ?CMsgClientSiteLicenseGetAvailableSeatsResponse {
	mut res := CMsgClientSiteLicenseGetAvailableSeatsResponse{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_eresult = true
				ii, v := vproto.unpack_int32_field(cur_buf, tag_wiretype.wire_type)?
				res.eresult = v
				i = ii
			}
			2 {
				res.has_seats = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.seats = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cmsgclientsitelicensegetavailableseatsresponse() CMsgClientSiteLicenseGetAvailableSeatsResponse {
	return CMsgClientSiteLicenseGetAvailableSeatsResponse{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cmsgclientsitelicensegetavailableseatsresponse(o CMsgClientSiteLicenseGetAvailableSeatsResponse, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cmsgclientsitelicensegetavailableseatsresponse(buf []byte, tag_wiretype vproto.WireType) ?(int, CMsgClientSiteLicenseGetAvailableSeatsResponse) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cmsgclientsitelicensegetavailableseatsresponse_unpack(v)?
	return i, unpacked
}

pub struct CMsgClientSiteLicenseGetContentCacheInfo {
mut:
	unknown_fields []vproto.UnknownField
}

pub fn (o &CMsgClientSiteLicenseGetContentCacheInfo) pack() []byte {
	res := []byte{}
	return res
}

pub fn cmsgclientsitelicensegetcontentcacheinfo_unpack(buf []byte) ?CMsgClientSiteLicenseGetContentCacheInfo {
	res := CMsgClientSiteLicenseGetContentCacheInfo{}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cmsgclientsitelicensegetcontentcacheinfo() CMsgClientSiteLicenseGetContentCacheInfo {
	return CMsgClientSiteLicenseGetContentCacheInfo{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cmsgclientsitelicensegetcontentcacheinfo(o CMsgClientSiteLicenseGetContentCacheInfo, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cmsgclientsitelicensegetcontentcacheinfo(buf []byte, tag_wiretype vproto.WireType) ?(int, CMsgClientSiteLicenseGetContentCacheInfo) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cmsgclientsitelicensegetcontentcacheinfo_unpack(v)?
	return i, unpacked
}

pub struct CMsgClientSiteLicenseGetContentCacheInfoResponse {
mut:
	unknown_fields   []vproto.UnknownField
pub mut:
	use_cache        bool
	has_use_cache    bool
	ipv4_address     u32
	has_ipv4_address bool
	port_number      u32
	has_port_number  bool
	p2p_group        u32
	has_p2p_group    bool
	ip_address       string
	has_ip_address   bool
}

pub fn (o &CMsgClientSiteLicenseGetContentCacheInfoResponse) pack() []byte {
	mut res := []byte{}
	if o.has_use_cache {
		res << vproto.pack_bool_field(o.use_cache, 1)
	}
	if o.has_ipv4_address {
		res << vproto.pack_uint32_field(o.ipv4_address, 2)
	}
	if o.has_port_number {
		res << vproto.pack_uint32_field(o.port_number, 3)
	}
	if o.has_p2p_group {
		res << vproto.pack_uint32_field(o.p2p_group, 4)
	}
	if o.has_ip_address {
		res << vproto.pack_string_field(o.ip_address, 5)
	}
	return res
}

pub fn cmsgclientsitelicensegetcontentcacheinforesponse_unpack(buf []byte) ?CMsgClientSiteLicenseGetContentCacheInfoResponse {
	mut res := CMsgClientSiteLicenseGetContentCacheInfoResponse{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_use_cache = true
				ii, v := vproto.unpack_bool_field(cur_buf, tag_wiretype.wire_type)?
				res.use_cache = v
				i = ii
			}
			2 {
				res.has_ipv4_address = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.ipv4_address = v
				i = ii
			}
			3 {
				res.has_port_number = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.port_number = v
				i = ii
			}
			4 {
				res.has_p2p_group = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.p2p_group = v
				i = ii
			}
			5 {
				res.has_ip_address = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.ip_address = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cmsgclientsitelicensegetcontentcacheinforesponse() CMsgClientSiteLicenseGetContentCacheInfoResponse {
	return CMsgClientSiteLicenseGetContentCacheInfoResponse{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cmsgclientsitelicensegetcontentcacheinforesponse(o CMsgClientSiteLicenseGetContentCacheInfoResponse, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cmsgclientsitelicensegetcontentcacheinforesponse(buf []byte, tag_wiretype vproto.WireType) ?(int, CMsgClientSiteLicenseGetContentCacheInfoResponse) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cmsgclientsitelicensegetcontentcacheinforesponse_unpack(v)?
	return i, unpacked
}
