// Generated by vproto - Do not modify
module proto

import emily33901.vproto

pub struct CPartnerApps_RequestUploadToken_Request {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	filename       string
	has_filename   bool
	appid          u32
	has_appid      bool
}

pub fn (o &CPartnerApps_RequestUploadToken_Request) pack() []byte {
	mut res := []byte{}
	if o.has_filename {
		res << vproto.pack_string_field(o.filename, 1)
	}
	if o.has_appid {
		res << vproto.pack_uint32_field(o.appid, 2)
	}
	return res
}

pub fn cpartnerapps_requestuploadtoken_request_unpack(buf []byte) ?CPartnerApps_RequestUploadToken_Request {
	mut res := CPartnerApps_RequestUploadToken_Request{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_filename = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.filename = v
				i = ii
			}
			2 {
				res.has_appid = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.appid = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_requestuploadtoken_request() CPartnerApps_RequestUploadToken_Request {
	return CPartnerApps_RequestUploadToken_Request{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_requestuploadtoken_request(o CPartnerApps_RequestUploadToken_Request, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_requestuploadtoken_request(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_RequestUploadToken_Request) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_requestuploadtoken_request_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_RequestUploadToken_Response {
mut:
	unknown_fields   []vproto.UnknownField
pub mut:
	upload_token     u64
	has_upload_token bool
	location         string
	has_location     bool
	routing_id       u64
	has_routing_id   bool
}

pub fn (o &CPartnerApps_RequestUploadToken_Response) pack() []byte {
	mut res := []byte{}
	if o.has_upload_token {
		res << vproto.pack_uint64_field(o.upload_token, 1)
	}
	if o.has_location {
		res << vproto.pack_string_field(o.location, 2)
	}
	if o.has_routing_id {
		res << vproto.pack_uint64_field(o.routing_id, 3)
	}
	return res
}

pub fn cpartnerapps_requestuploadtoken_response_unpack(buf []byte) ?CPartnerApps_RequestUploadToken_Response {
	mut res := CPartnerApps_RequestUploadToken_Response{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_upload_token = true
				ii, v := vproto.unpack_uint64_field(cur_buf, tag_wiretype.wire_type)?
				res.upload_token = v
				i = ii
			}
			2 {
				res.has_location = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.location = v
				i = ii
			}
			3 {
				res.has_routing_id = true
				ii, v := vproto.unpack_uint64_field(cur_buf, tag_wiretype.wire_type)?
				res.routing_id = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_requestuploadtoken_response() CPartnerApps_RequestUploadToken_Response {
	return CPartnerApps_RequestUploadToken_Response{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_requestuploadtoken_response(o CPartnerApps_RequestUploadToken_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_requestuploadtoken_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_RequestUploadToken_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_requestuploadtoken_response_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_FinishUpload_Request {
mut:
	unknown_fields   []vproto.UnknownField
pub mut:
	upload_token     u64
	has_upload_token bool
	routing_id       u64
	has_routing_id   bool
	app_id           u32
	has_app_id       bool
}

pub fn (o &CPartnerApps_FinishUpload_Request) pack() []byte {
	mut res := []byte{}
	if o.has_upload_token {
		res << vproto.pack_uint64_field(o.upload_token, 1)
	}
	if o.has_routing_id {
		res << vproto.pack_uint64_field(o.routing_id, 2)
	}
	if o.has_app_id {
		res << vproto.pack_uint32_field(o.app_id, 3)
	}
	return res
}

pub fn cpartnerapps_finishupload_request_unpack(buf []byte) ?CPartnerApps_FinishUpload_Request {
	mut res := CPartnerApps_FinishUpload_Request{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_upload_token = true
				ii, v := vproto.unpack_uint64_field(cur_buf, tag_wiretype.wire_type)?
				res.upload_token = v
				i = ii
			}
			2 {
				res.has_routing_id = true
				ii, v := vproto.unpack_uint64_field(cur_buf, tag_wiretype.wire_type)?
				res.routing_id = v
				i = ii
			}
			3 {
				res.has_app_id = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.app_id = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_finishupload_request() CPartnerApps_FinishUpload_Request {
	return CPartnerApps_FinishUpload_Request{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_finishupload_request(o CPartnerApps_FinishUpload_Request, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_finishupload_request(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_FinishUpload_Request) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_finishupload_request_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_FinishUploadKVSign_Response {
mut:
	unknown_fields           []vproto.UnknownField
pub mut:
	signed_installscript     string
	has_signed_installscript bool
}

pub fn (o &CPartnerApps_FinishUploadKVSign_Response) pack() []byte {
	mut res := []byte{}
	if o.has_signed_installscript {
		res << vproto.pack_string_field(o.signed_installscript, 1)
	}
	return res
}

pub fn cpartnerapps_finishuploadkvsign_response_unpack(buf []byte) ?CPartnerApps_FinishUploadKVSign_Response {
	mut res := CPartnerApps_FinishUploadKVSign_Response{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_signed_installscript = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.signed_installscript = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_finishuploadkvsign_response() CPartnerApps_FinishUploadKVSign_Response {
	return CPartnerApps_FinishUploadKVSign_Response{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_finishuploadkvsign_response(o CPartnerApps_FinishUploadKVSign_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_finishuploadkvsign_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_FinishUploadKVSign_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_finishuploadkvsign_response_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_FinishUploadLegacyDRM_Request {
mut:
	unknown_fields   []vproto.UnknownField
pub mut:
	upload_token     u64
	has_upload_token bool
	routing_id       u64
	has_routing_id   bool
	app_id           u32
	has_app_id       bool
	flags            u32
	has_flags        bool
	tool_name        string
	has_tool_name    bool
}

pub fn (o &CPartnerApps_FinishUploadLegacyDRM_Request) pack() []byte {
	mut res := []byte{}
	if o.has_upload_token {
		res << vproto.pack_uint64_field(o.upload_token, 1)
	}
	if o.has_routing_id {
		res << vproto.pack_uint64_field(o.routing_id, 2)
	}
	if o.has_app_id {
		res << vproto.pack_uint32_field(o.app_id, 3)
	}
	if o.has_flags {
		res << vproto.pack_uint32_field(o.flags, 4)
	}
	if o.has_tool_name {
		res << vproto.pack_string_field(o.tool_name, 5)
	}
	return res
}

pub fn cpartnerapps_finishuploadlegacydrm_request_unpack(buf []byte) ?CPartnerApps_FinishUploadLegacyDRM_Request {
	mut res := CPartnerApps_FinishUploadLegacyDRM_Request{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_upload_token = true
				ii, v := vproto.unpack_uint64_field(cur_buf, tag_wiretype.wire_type)?
				res.upload_token = v
				i = ii
			}
			2 {
				res.has_routing_id = true
				ii, v := vproto.unpack_uint64_field(cur_buf, tag_wiretype.wire_type)?
				res.routing_id = v
				i = ii
			}
			3 {
				res.has_app_id = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.app_id = v
				i = ii
			}
			4 {
				res.has_flags = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.flags = v
				i = ii
			}
			5 {
				res.has_tool_name = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.tool_name = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_finishuploadlegacydrm_request() CPartnerApps_FinishUploadLegacyDRM_Request {
	return CPartnerApps_FinishUploadLegacyDRM_Request{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_finishuploadlegacydrm_request(o CPartnerApps_FinishUploadLegacyDRM_Request, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_finishuploadlegacydrm_request(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_FinishUploadLegacyDRM_Request) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_finishuploadlegacydrm_request_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_FinishUploadLegacyDRM_Response {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	file_id        string
	has_file_id    bool
}

pub fn (o &CPartnerApps_FinishUploadLegacyDRM_Response) pack() []byte {
	mut res := []byte{}
	if o.has_file_id {
		res << vproto.pack_string_field(o.file_id, 1)
	}
	return res
}

pub fn cpartnerapps_finishuploadlegacydrm_response_unpack(buf []byte) ?CPartnerApps_FinishUploadLegacyDRM_Response {
	mut res := CPartnerApps_FinishUploadLegacyDRM_Response{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_file_id = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.file_id = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_finishuploadlegacydrm_response() CPartnerApps_FinishUploadLegacyDRM_Response {
	return CPartnerApps_FinishUploadLegacyDRM_Response{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_finishuploadlegacydrm_response(o CPartnerApps_FinishUploadLegacyDRM_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_finishuploadlegacydrm_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_FinishUploadLegacyDRM_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_finishuploadlegacydrm_response_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_FinishUpload_Response {
mut:
	unknown_fields []vproto.UnknownField
}

pub fn (o &CPartnerApps_FinishUpload_Response) pack() []byte {
	res := []byte{}
	return res
}

pub fn cpartnerapps_finishupload_response_unpack(buf []byte) ?CPartnerApps_FinishUpload_Response {
	res := CPartnerApps_FinishUpload_Response{}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_finishupload_response() CPartnerApps_FinishUpload_Response {
	return CPartnerApps_FinishUpload_Response{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_finishupload_response(o CPartnerApps_FinishUpload_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_finishupload_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_FinishUpload_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_finishupload_response_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_FinishUploadDepot_Request {
mut:
	unknown_fields   []vproto.UnknownField
pub mut:
	upload_token     u64
	has_upload_token bool
	routing_id       u64
	has_routing_id   bool
	app_id           u32
	has_app_id       bool
	depot_id         u32
	has_depot_id     bool
	build_flags      u32
	has_build_flags  bool
}

pub fn (o &CPartnerApps_FinishUploadDepot_Request) pack() []byte {
	mut res := []byte{}
	if o.has_upload_token {
		res << vproto.pack_uint64_field(o.upload_token, 1)
	}
	if o.has_routing_id {
		res << vproto.pack_uint64_field(o.routing_id, 2)
	}
	if o.has_app_id {
		res << vproto.pack_uint32_field(o.app_id, 3)
	}
	if o.has_depot_id {
		res << vproto.pack_uint32_field(o.depot_id, 4)
	}
	if o.has_build_flags {
		res << vproto.pack_uint32_field(o.build_flags, 5)
	}
	return res
}

pub fn cpartnerapps_finishuploaddepot_request_unpack(buf []byte) ?CPartnerApps_FinishUploadDepot_Request {
	mut res := CPartnerApps_FinishUploadDepot_Request{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_upload_token = true
				ii, v := vproto.unpack_uint64_field(cur_buf, tag_wiretype.wire_type)?
				res.upload_token = v
				i = ii
			}
			2 {
				res.has_routing_id = true
				ii, v := vproto.unpack_uint64_field(cur_buf, tag_wiretype.wire_type)?
				res.routing_id = v
				i = ii
			}
			3 {
				res.has_app_id = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.app_id = v
				i = ii
			}
			4 {
				res.has_depot_id = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.depot_id = v
				i = ii
			}
			5 {
				res.has_build_flags = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.build_flags = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_finishuploaddepot_request() CPartnerApps_FinishUploadDepot_Request {
	return CPartnerApps_FinishUploadDepot_Request{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_finishuploaddepot_request(o CPartnerApps_FinishUploadDepot_Request, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_finishuploaddepot_request(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_FinishUploadDepot_Request) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_finishuploaddepot_request_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_FinishUploadDepot_Response {
mut:
	unknown_fields []vproto.UnknownField
}

pub fn (o &CPartnerApps_FinishUploadDepot_Response) pack() []byte {
	res := []byte{}
	return res
}

pub fn cpartnerapps_finishuploaddepot_response_unpack(buf []byte) ?CPartnerApps_FinishUploadDepot_Response {
	res := CPartnerApps_FinishUploadDepot_Response{}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_finishuploaddepot_response() CPartnerApps_FinishUploadDepot_Response {
	return CPartnerApps_FinishUploadDepot_Response{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_finishuploaddepot_response(o CPartnerApps_FinishUploadDepot_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_finishuploaddepot_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_FinishUploadDepot_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_finishuploaddepot_response_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_GetDepotBuildResult_Request {
mut:
	unknown_fields   []vproto.UnknownField
pub mut:
	upload_token     u64
	has_upload_token bool
	routing_id       u64
	has_routing_id   bool
}

pub fn (o &CPartnerApps_GetDepotBuildResult_Request) pack() []byte {
	mut res := []byte{}
	if o.has_upload_token {
		res << vproto.pack_uint64_field(o.upload_token, 1)
	}
	if o.has_routing_id {
		res << vproto.pack_uint64_field(o.routing_id, 2)
	}
	return res
}

pub fn cpartnerapps_getdepotbuildresult_request_unpack(buf []byte) ?CPartnerApps_GetDepotBuildResult_Request {
	mut res := CPartnerApps_GetDepotBuildResult_Request{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_upload_token = true
				ii, v := vproto.unpack_uint64_field(cur_buf, tag_wiretype.wire_type)?
				res.upload_token = v
				i = ii
			}
			2 {
				res.has_routing_id = true
				ii, v := vproto.unpack_uint64_field(cur_buf, tag_wiretype.wire_type)?
				res.routing_id = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_getdepotbuildresult_request() CPartnerApps_GetDepotBuildResult_Request {
	return CPartnerApps_GetDepotBuildResult_Request{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_getdepotbuildresult_request(o CPartnerApps_GetDepotBuildResult_Request, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_getdepotbuildresult_request(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_GetDepotBuildResult_Request) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_getdepotbuildresult_request_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_GetDepotBuildResult_Response {
mut:
	unknown_fields  []vproto.UnknownField
pub mut:
	manifest_id     u64
	has_manifest_id bool
	error_msg       string
	has_error_msg   bool
}

pub fn (o &CPartnerApps_GetDepotBuildResult_Response) pack() []byte {
	mut res := []byte{}
	if o.has_manifest_id {
		res << vproto.pack_uint64_field(o.manifest_id, 1)
	}
	if o.has_error_msg {
		res << vproto.pack_string_field(o.error_msg, 2)
	}
	return res
}

pub fn cpartnerapps_getdepotbuildresult_response_unpack(buf []byte) ?CPartnerApps_GetDepotBuildResult_Response {
	mut res := CPartnerApps_GetDepotBuildResult_Response{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_manifest_id = true
				ii, v := vproto.unpack_uint64_field(cur_buf, tag_wiretype.wire_type)?
				res.manifest_id = v
				i = ii
			}
			2 {
				res.has_error_msg = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.error_msg = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_getdepotbuildresult_response() CPartnerApps_GetDepotBuildResult_Response {
	return CPartnerApps_GetDepotBuildResult_Response{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_getdepotbuildresult_response(o CPartnerApps_GetDepotBuildResult_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_getdepotbuildresult_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_GetDepotBuildResult_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_getdepotbuildresult_response_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_FindDRMUploads_Request {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	app_id         int
	has_app_id     bool
}

pub fn (o &CPartnerApps_FindDRMUploads_Request) pack() []byte {
	mut res := []byte{}
	if o.has_app_id {
		res << vproto.pack_int32_field(o.app_id, 1)
	}
	return res
}

pub fn cpartnerapps_finddrmuploads_request_unpack(buf []byte) ?CPartnerApps_FindDRMUploads_Request {
	mut res := CPartnerApps_FindDRMUploads_Request{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_app_id = true
				ii, v := vproto.unpack_int32_field(cur_buf, tag_wiretype.wire_type)?
				res.app_id = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_finddrmuploads_request() CPartnerApps_FindDRMUploads_Request {
	return CPartnerApps_FindDRMUploads_Request{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_finddrmuploads_request(o CPartnerApps_FindDRMUploads_Request, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_finddrmuploads_request(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_FindDRMUploads_Request) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_finddrmuploads_request_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_ExistingDRMUpload {
mut:
	unknown_fields    []vproto.UnknownField
pub mut:
	file_id           string
	has_file_id       bool
	app_id            u32
	has_app_id        bool
	actor_id          int
	has_actor_id      bool
	supplied_name     string
	has_supplied_name bool
	flags             u32
	has_flags         bool
	mod_type          string
	has_mod_type      bool
	timestamp         u32
	has_timestamp     bool
	orig_file_id      string
	has_orig_file_id  bool
}

pub fn (o &CPartnerApps_ExistingDRMUpload) pack() []byte {
	mut res := []byte{}
	if o.has_file_id {
		res << vproto.pack_string_field(o.file_id, 1)
	}
	if o.has_app_id {
		res << vproto.pack_uint32_field(o.app_id, 2)
	}
	if o.has_actor_id {
		res << vproto.pack_int32_field(o.actor_id, 3)
	}
	if o.has_supplied_name {
		res << vproto.pack_string_field(o.supplied_name, 5)
	}
	if o.has_flags {
		res << vproto.pack_uint32_field(o.flags, 6)
	}
	if o.has_mod_type {
		res << vproto.pack_string_field(o.mod_type, 7)
	}
	if o.has_timestamp {
		res << vproto.pack_32bit_field(o.timestamp, 8)
	}
	if o.has_orig_file_id {
		res << vproto.pack_string_field(o.orig_file_id, 9)
	}
	return res
}

pub fn cpartnerapps_existingdrmupload_unpack(buf []byte) ?CPartnerApps_ExistingDRMUpload {
	mut res := CPartnerApps_ExistingDRMUpload{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_file_id = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.file_id = v
				i = ii
			}
			2 {
				res.has_app_id = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.app_id = v
				i = ii
			}
			3 {
				res.has_actor_id = true
				ii, v := vproto.unpack_int32_field(cur_buf, tag_wiretype.wire_type)?
				res.actor_id = v
				i = ii
			}
			5 {
				res.has_supplied_name = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.supplied_name = v
				i = ii
			}
			6 {
				res.has_flags = true
				ii, v := vproto.unpack_uint32_field(cur_buf, tag_wiretype.wire_type)?
				res.flags = v
				i = ii
			}
			7 {
				res.has_mod_type = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.mod_type = v
				i = ii
			}
			8 {
				res.has_timestamp = true
				ii, v := vproto.unpack_32bit_field(cur_buf, tag_wiretype.wire_type)?
				res.timestamp = v
				i = ii
			}
			9 {
				res.has_orig_file_id = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.orig_file_id = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_existingdrmupload() CPartnerApps_ExistingDRMUpload {
	return CPartnerApps_ExistingDRMUpload{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_existingdrmupload(o CPartnerApps_ExistingDRMUpload, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_existingdrmupload(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_ExistingDRMUpload) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_existingdrmupload_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_FindDRMUploads_Response {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	uploads        []CPartnerApps_ExistingDRMUpload
}

pub fn (o &CPartnerApps_FindDRMUploads_Response) pack() []byte {
	mut res := []byte{}
	// [packed=false]
	for _, x in o.uploads {
		res << zzz_vproto_internal_pack_cpartnerapps_existingdrmupload(x, 1)
	}
	return res
}

pub fn cpartnerapps_finddrmuploads_response_unpack(buf []byte) ?CPartnerApps_FindDRMUploads_Response {
	mut res := CPartnerApps_FindDRMUploads_Response{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				// [packed=false]
				ii, v := zzz_vproto_internal_unpack_cpartnerapps_existingdrmupload(cur_buf,
					tag_wiretype.wire_type)?
				res.uploads << v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_finddrmuploads_response() CPartnerApps_FindDRMUploads_Response {
	return CPartnerApps_FindDRMUploads_Response{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_finddrmuploads_response(o CPartnerApps_FindDRMUploads_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_finddrmuploads_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_FindDRMUploads_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_finddrmuploads_response_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_Download_Request {
mut:
	unknown_fields []vproto.UnknownField
pub mut:
	file_id        string
	has_file_id    bool
	app_id         int
	has_app_id     bool
}

pub fn (o &CPartnerApps_Download_Request) pack() []byte {
	mut res := []byte{}
	if o.has_file_id {
		res << vproto.pack_string_field(o.file_id, 1)
	}
	if o.has_app_id {
		res << vproto.pack_int32_field(o.app_id, 2)
	}
	return res
}

pub fn cpartnerapps_download_request_unpack(buf []byte) ?CPartnerApps_Download_Request {
	mut res := CPartnerApps_Download_Request{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_file_id = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.file_id = v
				i = ii
			}
			2 {
				res.has_app_id = true
				ii, v := vproto.unpack_int32_field(cur_buf, tag_wiretype.wire_type)?
				res.app_id = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_download_request() CPartnerApps_Download_Request {
	return CPartnerApps_Download_Request{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_download_request(o CPartnerApps_Download_Request, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_download_request(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_Download_Request) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_download_request_unpack(v)?
	return i, unpacked
}

pub struct CPartnerApps_Download_Response {
mut:
	unknown_fields   []vproto.UnknownField
pub mut:
	download_url     string
	has_download_url bool
	app_id           int
	has_app_id       bool
}

pub fn (o &CPartnerApps_Download_Response) pack() []byte {
	mut res := []byte{}
	if o.has_download_url {
		res << vproto.pack_string_field(o.download_url, 1)
	}
	if o.has_app_id {
		res << vproto.pack_int32_field(o.app_id, 2)
	}
	return res
}

pub fn cpartnerapps_download_response_unpack(buf []byte) ?CPartnerApps_Download_Response {
	mut res := CPartnerApps_Download_Response{}
	mut total := 0
	for total < buf.len {
		mut i := 0
		buf_before_wire_type := buf[total..]
		tag_wiretype := vproto.unpack_tag_wire_type(buf_before_wire_type) or {
			return error('malformed protobuf (couldnt parse tag & wire type)')
		}
		cur_buf := buf_before_wire_type[tag_wiretype.consumed..]
		match tag_wiretype.tag {
			1 {
				res.has_download_url = true
				ii, v := vproto.unpack_string_field(cur_buf, tag_wiretype.wire_type)?
				res.download_url = v
				i = ii
			}
			2 {
				res.has_app_id = true
				ii, v := vproto.unpack_int32_field(cur_buf, tag_wiretype.wire_type)?
				res.app_id = v
				i = ii
			}
			else {
				ii, v := vproto.unpack_unknown_field(cur_buf, tag_wiretype.wire_type)
				res.unknown_fields <<
					vproto.UnknownField{tag_wiretype.wire_type, tag_wiretype.tag, v}
				i = ii
			}
		}
		if i == 0 {
			return error('malformed protobuf (didnt unpack a field)')
		}
		total += tag_wiretype.consumed + i
	}
	return res
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_new_cpartnerapps_download_response() CPartnerApps_Download_Response {
	return CPartnerApps_Download_Response{}
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_pack_cpartnerapps_download_response(o CPartnerApps_Download_Response, num u32) []byte {
	return vproto.pack_message_field(o.pack(), num)
}

// FOR INTERNAL USE ONLY
pub fn zzz_vproto_internal_unpack_cpartnerapps_download_response(buf []byte, tag_wiretype vproto.WireType) ?(int, CPartnerApps_Download_Response) {
	i, v := vproto.unpack_message_field(buf, tag_wiretype)?
	mut unpacked := cpartnerapps_download_response_unpack(v)?
	return i, unpacked
}
